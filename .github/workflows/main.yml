name: CI/CD Pipeline with Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram-backend:latest

  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram-frontend:latest

  test-api:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: foodgram
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start infrastructure
        run: |
          cd infra
          docker-compose up -d --build
          sleep 20  # Wait for services to initialize

      - name: Install Newman
        run: npm install -g newman

      - name: Run API tests
        run: |
          newman run postman_collection/foodgram.postman_collection.json \
            --env-var "BASE_URL=http://localhost:8000" \
            --reporters cli,junit \
            --reporter-junit-export test-results.xml

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: api-test-results
          path: test-results.xml

  notify:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend, test-api]
    steps:
      - name: Send notification
        if: always()
        run: |
          STATUS=$([ ${{ job.status }} == 'success' ] && echo "✅ Успешно" || echo "❌ Ошибка")
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d text="Foodgram CI/CD: $STATUS%0A%0AВетка: ${GITHUB_REF#refs/heads/}%0AКоммит: ${GITHUB_SHA:0:7}%0AПодробности: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"